// Generated by gencpp from file tug_stage_ros/Fiducials.msg
// DO NOT EDIT!


#ifndef TUG_STAGE_ROS_MESSAGE_FIDUCIALS_H
#define TUG_STAGE_ROS_MESSAGE_FIDUCIALS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <tug_stage_ros/Fiducial.h>

namespace tug_stage_ros
{
template <class ContainerAllocator>
struct Fiducials_
{
  typedef Fiducials_<ContainerAllocator> Type;

  Fiducials_()
    : header()
    , angle_min(0.0)
    , angle_max(0.0)
    , angle_increment(0.0)
    , range_min(0.0)
    , range_max(0.0)
    , observations()  {
    }
  Fiducials_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angle_min(0.0)
    , angle_max(0.0)
    , angle_increment(0.0)
    , range_min(0.0)
    , range_max(0.0)
    , observations(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _angle_min_type;
  _angle_min_type angle_min;

   typedef float _angle_max_type;
  _angle_max_type angle_max;

   typedef float _angle_increment_type;
  _angle_increment_type angle_increment;

   typedef float _range_min_type;
  _range_min_type range_min;

   typedef float _range_max_type;
  _range_max_type range_max;

   typedef std::vector< ::tug_stage_ros::Fiducial_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tug_stage_ros::Fiducial_<ContainerAllocator> >::other >  _observations_type;
  _observations_type observations;





  typedef boost::shared_ptr< ::tug_stage_ros::Fiducials_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tug_stage_ros::Fiducials_<ContainerAllocator> const> ConstPtr;

}; // struct Fiducials_

typedef ::tug_stage_ros::Fiducials_<std::allocator<void> > Fiducials;

typedef boost::shared_ptr< ::tug_stage_ros::Fiducials > FiducialsPtr;
typedef boost::shared_ptr< ::tug_stage_ros::Fiducials const> FiducialsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tug_stage_ros::Fiducials_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tug_stage_ros::Fiducials_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tug_stage_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'tug_stage_ros': ['/home/robotics/catkin_ws/src/RoboticsUE/tug_stage_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tug_stage_ros::Fiducials_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tug_stage_ros::Fiducials_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tug_stage_ros::Fiducials_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c6a87ee272c052fc7ab84974d396ec8";
  }

  static const char* value(const ::tug_stage_ros::Fiducials_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c6a87ee272c052fULL;
  static const uint64_t static_value2 = 0xc7ab84974d396ec8ULL;
};

template<class ContainerAllocator>
struct DataType< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tug_stage_ros/Fiducials";
  }

  static const char* value(const ::tug_stage_ros::Fiducials_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# array of beacon observation\n"
"Header header\n"
"float32 angle_min\n"
"float32 angle_max\n"
"float32 angle_increment\n"
"float32 range_min\n"
"float32 range_max\n"
"Fiducial[] observations\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: tug_stage_ros/Fiducial\n"
"# beacon observation\n"
"float64 range\n"
"float64 bearing\n"
"string type\n"
"float64 value\n"
"int64 id\n"
;
  }

  static const char* value(const ::tug_stage_ros::Fiducials_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angle_min);
      stream.next(m.angle_max);
      stream.next(m.angle_increment);
      stream.next(m.range_min);
      stream.next(m.range_max);
      stream.next(m.observations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fiducials_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tug_stage_ros::Fiducials_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tug_stage_ros::Fiducials_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angle_min: ";
    Printer<float>::stream(s, indent + "  ", v.angle_min);
    s << indent << "angle_max: ";
    Printer<float>::stream(s, indent + "  ", v.angle_max);
    s << indent << "angle_increment: ";
    Printer<float>::stream(s, indent + "  ", v.angle_increment);
    s << indent << "range_min: ";
    Printer<float>::stream(s, indent + "  ", v.range_min);
    s << indent << "range_max: ";
    Printer<float>::stream(s, indent + "  ", v.range_max);
    s << indent << "observations[]" << std::endl;
    for (size_t i = 0; i < v.observations.size(); ++i)
    {
      s << indent << "  observations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tug_stage_ros::Fiducial_<ContainerAllocator> >::stream(s, indent + "    ", v.observations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUG_STAGE_ROS_MESSAGE_FIDUCIALS_H
